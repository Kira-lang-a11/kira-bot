#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Kira Studio Bot ‚Äî –∫–∞–Ω–∞–ª + –ª–∏—á–∫–∞ + –º–æ—Å—Ç "–∞–¥–º–∏–Ω ‚Üî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
# python-telegram-bot v21+
# –ö–æ–º–∞–Ω–¥—ã: /start /prices /order /post /myid  (+ /channel_id –≤ –∫–∞–Ω–∞–ª–µ)

import os
import logging
from typing import List, Dict, Optional

from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.constants import ParseMode, ChatType
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# ---------- Load .env ----------
load_dotenv()  # –ø–æ–¥—Ç—è–Ω–µ—Ç BOT_TOKEN, ADMIN_IDS, CHANNEL_ID –∏–∑ .env

# ---------- Config ----------
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
CHANNEL_ID = int(os.getenv("CHANNEL_ID", "0"))  # e.g. -1001234567890
ADMIN_IDS: List[int] = [
    int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip().lstrip("-").isdigit()
]

# Conversation state(s)
ORDER_DETAILS = 1

# –ü–∞–º—è—Ç—å: –∫–∞–∫–æ–π —Ü–µ–ª–∏ —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∞–¥–º–∏–Ω: {admin_id: target_chat_id}
PENDING_REPLY: Dict[int, int] = {}

# ---------- Logging ----------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger("kira-bot")


# ---------- Helpers ----------
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS


async def send_to_admins(
    context: ContextTypes.DEFAULT_TYPE,
    text: str,
    reply_markup: Optional[InlineKeyboardMarkup] = None,
):
    if not ADMIN_IDS:
        logger.warning("ADMIN_IDS is empty ‚Äî no one to notify")
        return
    for admin in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin, text=text, parse_mode=ParseMode.HTML, reply_markup=reply_markup
            )
        except Exception as e:
            logger.exception(f"Failed to notify admin {admin}: {e}")


def build_reply_keyboard(target_chat_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{target_chat_id}")]]
    )


def safe_username(u) -> str:
    return f"@{u.username}" if getattr(u, "username", None) else "(–±–µ–∑ username)"


# ---------- UI: Text & Keyboards ----------
def build_prices_text() -> str:
    return (
        "<b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã</b>\n\n"
        "<b>–§–æ—Ç–æ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã</b>\n"
        "‚Ä¢ 4 —Ñ–æ—Ç–æ 3√ó4 (—Ü–∏—Ñ—Ä–æ–≤–æ–π —Ñ–∞–π–ª) ‚Äî 500‚ÇΩ\n\n"
        "<b>–í–∏–∑—É–∞–ª—ã –¥–ª—è Instagram</b>\n"
        "‚Ä¢ 5 –≤–∏–∑—É–∞–ª–æ–≤ ‚Äî 2 500‚ÇΩ\n"
        "‚Ä¢ 10 –≤–∏–∑—É–∞–ª–æ–≤ ‚Äî 4 500‚ÇΩ üî• –•–∏—Ç\n\n"
        "<b>–ù–µ–π—Ä–æ—Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è</b>\n"
        "‚Ä¢ Lite (10 –æ–±—Ä–∞–∑–æ–≤) ‚Äî 3 900‚ÇΩ\n"
        "‚Ä¢ Standard (20 –æ–±—Ä–∞–∑–æ–≤) ‚Äî 6 900‚ÇΩ üî• –•–∏—Ç\n"
        "‚Ä¢ Pro (40 –æ–±—Ä–∞–∑–æ–≤) ‚Äî 11 900‚ÇΩ\n\n"
        "<b>–î–µ—Ç—Å–∫–∏–µ —Ñ–æ—Ç–æ –≤ —Å–∫–∞–∑–æ—á–Ω–æ–º —Å—Ç–∏–ª–µ</b>\n"
        "‚Ä¢ Lite (5 –æ–±—Ä–∞–∑–æ–≤ –∏–∑ 1 —Ñ–æ—Ç–æ) ‚Äî 2 900‚ÇΩ\n"
        "‚Ä¢ Standard (12 –æ–±—Ä–∞–∑–æ–≤ –∏–∑ 2 —Ñ–æ—Ç–æ) ‚Äî 5 900‚ÇΩ üî• –•–∏—Ç\n"
        "‚Ä¢ Pro (25 –æ–±—Ä–∞–∑–æ–≤ –∏–∑ 3‚Äì4 —Ñ–æ—Ç–æ) ‚Äî 9 900‚ÇΩ\n\n"
        "<b>–§–æ—Ç–æ-–æ–±–Ω–∏–º–∞—à–∫–∏ —Å –±–ª–∏–∑–∫–∏–º–∏</b> ‚Äî –æ—Ç 1 500‚ÇΩ\n"
        "<b>–õ–æ–≥–æ—Ç–∏–ø</b> ‚Äî –æ—Ç 3 000‚ÇΩ\n"
        "<b>–ë–æ—Ç –¥–ª—è TG/WhatsApp</b> ‚Äî –æ—Ç 12 000‚ÇΩ\n"
        "<b>–ê—Ñ–∏—à–∞ / –ü–æ—Å—Ç–µ—Ä</b> ‚Äî –æ—Ç 1 500‚ÇΩ\n"
        "<b>–í–∏–¥–µ–æ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é</b> ‚Äî –æ—Ç 4 000‚ÇΩ\n"
        "<b>–û–±–ª–æ–∂–∫–∞ –¥–ª—è YouTube</b> ‚Äî 1 500‚ÇΩ\n"
        "<b>–ö–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è Wildberries</b> ‚Äî –æ—Ç 3 000‚ÇΩ\n"
        "<b>–ê—Ä—Ç-–ø–æ—Ä—Ç—Ä–µ—Ç</b> ‚Äî 2 000‚ÇΩ\n"
        "\n"
        "<b>FAQ:</b>\n"
        "‚Ä¢ –°—Ä–æ–∫–∏: 1‚Äì3 –¥–Ω—è (–ø–æ –æ–±—ä—ë–º—É)\n"
        "‚Ä¢ –ü—Ä–∞–≤–∫–∏: 1‚Äì2 –ª—ë–≥–∫–∏–µ –ø—Ä–∞–≤–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã\n"
        "‚Ä¢ –û–ø–ª–∞—Ç–∞: 50% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –ø–æ—Å–ª–µ\n"
    )


def main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ú® –í–∏–∑—É–∞–ª—ã –¥–ª—è Instagram", callback_data="menu_instagram")],
        [InlineKeyboardButton("üé≠ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è", callback_data="menu_neuro")],
        [InlineKeyboardButton("üßö –î–µ—Ç—Å–∫–∏–µ: —Å–∫–∞–∑–æ—á–Ω—ã–π —Å—Ç–∏–ª—å", callback_data="menu_fairy")],
        [InlineKeyboardButton("üíå –ó–∞–∫–∞–∑–∞—Ç—å", callback_data="order"),
         InlineKeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å", url="https://t.me/miller_mua")],
        [InlineKeyboardButton("üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url="https://t.me/katerinamillermua")],
    ])


def instagram_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("5 –≤–∏–∑—É–∞–ª–æ–≤ ‚Äî 2 500‚ÇΩ", callback_data="pkg_instagram_5")],
        [InlineKeyboardButton("10 –≤–∏–∑—É–∞–ª–æ–≤ ‚Äî 4 500‚ÇΩ üî•", callback_data="pkg_instagram_10")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")],
    ])


def neuro_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Lite ‚Äî 3 900‚ÇΩ", callback_data="pkg_neuro_lite")],
        [InlineKeyboardButton("Standard ‚Äî 6 900‚ÇΩ üî•", callback_data="pkg_neuro_std")],
        [InlineKeyboardButton("Pro ‚Äî 11 900‚ÇΩ", callback_data="pkg_neuro_pro")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")],
    ])


def fairy_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Lite ‚Äî 2 900‚ÇΩ (5 –æ–±—Ä–∞–∑–æ–≤)", callback_data="pkg_fairy_lite")],
        [InlineKeyboardButton("Standard ‚Äî 5 900‚ÇΩ (12 –æ–±—Ä–∞–∑–æ–≤) üî•", callback_data="pkg_fairy_std")],
        [InlineKeyboardButton("Pro ‚Äî 9 900‚ÇΩ (25 –æ–±—Ä–∞–∑–æ–≤)", callback_data="pkg_fairy_pro")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")],
    ])


# ---------- Commands ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    kb = [[InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order")]]
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name or '–¥—Ä—É–≥'}! –Ø –ö–∏—Ä–∞-–±–æ—Ç. –ü–æ–º–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–µ–π—Ä–æ-—Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—é, "
        "–∞—Ä—Ç-–ø–æ—Ä—Ç—Ä–µ—Ç—ã –∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /order ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\n"
        "‚Ä¢ /prices ‚Äî —Ç–∞—Ä–∏—Ñ—ã\n"
        "‚Ä¢ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ ‚Äî –æ—Ç–≤–µ—á—É\n",
        reply_markup=InlineKeyboardMarkup(kb),
    )


async def prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        build_prices_text() + "\n–ù–∞–ø–∏—à–∏ /order –∏ —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –Ω—É–∂–Ω–æ ‚Äî –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å üôå",
        parse_mode=ParseMode.HTML,
        reply_markup=main_menu_kb()
    )


async def myid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    await update.message.reply_text(f"Your chat id: <code>{chat.id}</code>", parse_mode=ParseMode.HTML)


async def channel_id_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –†–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞ –∏ –≤ –∫–∞–Ω–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /channel_id
    chat = update.effective_chat
    try:
        await update.channel_post.reply_text(f"Channel id: <code>{chat.id}</code>", parse_mode=ParseMode.HTML)
    except Exception:
        await context.bot.send_message(chat.id, f"Channel id: <code>{chat.id}</code>", parse_mode=ParseMode.HTML)


# ---------- Order flow ----------
async def order_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–û–ø–∏—à–∏ –∑–∞–∫–∞–∑: —Å—Ç–∏–ª—å/—Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã, —Å–∫–æ–ª—å–∫–æ –≤–∏–∑—É–∞–ª–æ–≤, —Å—Ä–æ–∫–∏.\n"
        "–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ ‚Äî —è –≤—Å—ë –ø–µ—Ä–µ–¥–∞–º –∞–¥–º–∏–Ω–∞–º."
    )
    return ORDER_DETAILS


async def order_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat = update.effective_chat

    header = (
        f"<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n"
        f"From: <code>{user.full_name}</code> (id: <code>{user.id}</code>, {safe_username(user)})\n"
        f"Chat: <code>{chat.type}</code> (id: <code>{chat.id}</code>)\n"
    )

    # –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–≤–µ—Ç–∏—Ç—å"
    await send_to_admins(
        context,
        header + "–ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–∏–∂–µ (–µ—Å–ª–∏ –±—ã–ª–∏) –∏–ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
        reply_markup=build_reply_keyboard(chat.id),
    )

    if update.message.photo:
        photo = update.message.photo[-1]
        caption = (update.message.caption or "").strip()
        for admin in ADMIN_IDS:
            try:
                await context.bot.send_photo(admin, photo.file_id, caption=(caption or "–§–æ—Ç–∫–∞ –∏–∑ –∑–∞–∫–∞–∑–∞"))
            except Exception as e:
                logger.exception(f"Failed to forward photo to {admin}: {e}")
    elif update.message.document:
        doc = update.message.document
        for admin in ADMIN_IDS:
            try:
                await context.bot.send_document(admin, doc.file_id, caption="–î–æ–∫—É–º–µ–Ω—Ç –∏–∑ –∑–∞–∫–∞–∑–∞")
            except Exception as e:
                logger.exception(f"Failed to forward doc to {admin}: {e}")
    else:
        text = (update.message.text or "").strip()
        await send_to_admins(context, f"–¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞:\n{text or '(–ø—É—Å—Ç–æ)'}")

    await update.message.reply_text("–ü—Ä–∏–Ω—è–ª–∞! –ü–µ—Ä–µ–¥–∞–ª–∞ –∞–¥–º–∏–Ω–∞–º üíå –ú—ã —Å–≤—è–∂–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    return ConversationHandler.END


async def order_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –æ—Ç–º–µ–Ω–∏–ª–∞. –ï—Å–ª–∏ —á—Ç–æ ‚Äî /order üëå")
    return ConversationHandler.END


# ---------- Admin-only posting ----------
async def post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not is_admin(user.id):
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /post <—Ç–µ–∫—Å—Ç>")
        return

    text = " ".join(context.args)
    if CHANNEL_ID == 0:
        await update.message.reply_text("CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω.")
        return

    try:
        await context.bot.send_message(chat_id=CHANNEL_ID, text=text, parse_mode=ParseMode.HTML)
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª ‚úîÔ∏è")
    except Exception as e:
        logger.exception(f"/post failed: {e}")
        await update.message.reply_text(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {e}")


# ---------- Inline menu + REPLY router ----------
async def menu_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = (q.data or "").strip()
    await q.answer()

    # ====== –†–µ–∂–∏–º "–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é" –¥–ª—è –∞–¥–º–∏–Ω–∞ ======
    if data.startswith("reply:"):
        if q.message.chat.type != ChatType.PRIVATE or not is_admin(q.from_user.id):
            return
        target_chat_id = int(data.split(":", 1)[1])
        PENDING_REPLY[q.from_user.id] = target_chat_id
        await q.message.reply_text(
            f"‚úçÔ∏è –í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –æ—Ç–ø—Ä–∞–≤–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (chat_id <code>{target_chat_id}</code>).",
            parse_mode=ParseMode.HTML,
        )
        return

    # ====== –ú–µ–Ω—é –ø–∞–∫–µ—Ç–æ–≤/—Ü–µ–Ω ======
    if data == "menu_instagram":
        await q.message.edit_text(build_prices_text(), parse_mode=ParseMode.HTML, reply_markup=instagram_menu_kb())
        return
    if data == "menu_neuro":
        await q.message.edit_text(build_prices_text(), parse_mode=ParseMode.HTML, reply_markup=neuro_menu_kb())
        return
    if data == "menu_fairy":
        await q.message.edit_text(build_prices_text(), parse_mode=ParseMode.HTML, reply_markup=fairy_menu_kb())
        return
    if data == "back_main":
        await q.message.edit_text(build_prices_text(), parse_mode=ParseMode.HTML, reply_markup=main_menu_kb())
        return

    # –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ –ø–∞–∫–µ—Ç—É
    pkg_map = {
        "pkg_instagram_5":  "–•–æ—á—É –ø–∞–∫–µ—Ç: –í–∏–∑—É–∞–ª—ã –¥–ª—è Instagram ‚Äî 5 —à—Ç (2 500‚ÇΩ). –†–µ—Ñ—ã/—Å—Ç–∏–ª—å: ... –°—Ä–æ–∫: ...",
        "pkg_instagram_10": "–•–æ—á—É –ø–∞–∫–µ—Ç: –í–∏–∑—É–∞–ª—ã –¥–ª—è Instagram ‚Äî 10 —à—Ç (4 500‚ÇΩ). –†–µ—Ñ—ã/—Å—Ç–∏–ª—å: ... –°—Ä–æ–∫: ...",
        "pkg_neuro_lite":   "–•–æ—á—É –ø–∞–∫–µ—Ç: –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è ‚Äî Lite (3 900‚ÇΩ). –û–±—Ä–∞–∑—ã: 10. –ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–æ—Ç–æ: 1. –°—Ç–∏–ª—å: ...",
        "pkg_neuro_std":    "–•–æ—á—É –ø–∞–∫–µ—Ç: –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è ‚Äî Standard (6 900‚ÇΩ). –û–±—Ä–∞–∑—ã: 20. –ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–æ—Ç–æ: 2. –°—Ç–∏–ª—å: ...",
        "pkg_neuro_pro":    "–•–æ—á—É –ø–∞–∫–µ—Ç: –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è ‚Äî Pro (11 900‚ÇΩ). –û–±—Ä–∞–∑—ã: 40. –ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–æ—Ç–æ: 4. –°—Ç–∏–ª—å: ...",
        "pkg_fairy_lite":   "–•–æ—á—É –ø–∞–∫–µ—Ç: –î–µ—Ç—Å–∫–∏–µ —Ñ–æ—Ç–æ –≤ —Å–∫–∞–∑–æ—á–Ω–æ–º —Å—Ç–∏–ª–µ ‚Äî Lite (2 900‚ÇΩ). 5 –æ–±—Ä–∞–∑–æ–≤ –∏–∑ 1 —Ñ–æ—Ç–æ. –°–∫–∞–∑–∫–∞/—Å–µ—Ç—Ç–∏–Ω–≥: ...",
        "pkg_fairy_std":    "–•–æ—á—É –ø–∞–∫–µ—Ç: –î–µ—Ç—Å–∫–∏–µ —Ñ–æ—Ç–æ –≤ —Å–∫–∞–∑–æ—á–Ω–æ–º —Å—Ç–∏–ª–µ ‚Äî Standard (5 900‚ÇΩ). 12 –æ–±—Ä–∞–∑–æ–≤ –∏–∑ 2 —Ñ–æ—Ç–æ. –°–∫–∞–∑–∫–∞/—Å–µ—Ç—Ç–∏–Ω–≥: ...",
        "pkg_fairy_pro":    "–•–æ—á—É –ø–∞–∫–µ—Ç: –î–µ—Ç—Å–∫–∏–µ —Ñ–æ—Ç–æ –≤ —Å–∫–∞–∑–æ—á–Ω–æ–º —Å—Ç–∏–ª–µ ‚Äî Pro (9 900‚ÇΩ). 25 –æ–±—Ä–∞–∑–æ–≤ –∏–∑ 3‚Äì4 —Ñ–æ—Ç–æ. –°–∫–∞–∑–∫–∞/—Å–µ—Ç—Ç–∏–Ω–≥: ...",
    }
    if data in pkg_map:
        await q.message.reply_text(
            pkg_map[data] + "\n\n–ù–∞–∂–º–∏ /order –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ —Ä–µ–±—ë–Ω–∫–∞ + –ø—Ä–∏–º–µ—Ä—ã —Å–∫–∞–∑–æ—á–Ω–æ–≥–æ —Å—Ç–∏–ª—è ‚Äî —è –≤—Å—ë –ø–µ—Ä–µ–¥–∞–º üíå"
        )
        return

    if data == "order":
        await q.message.reply_text(
            "–û–∫–µ–π! –û–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–∫–∞–∑: —Å—Ç–∏–ª—å/—Ä–µ—Ñ–µ—Ä–µ–Ω—Å, —Å–∫–æ–ª—å–∫–æ –≤–∏–∑—É–∞–ª–æ–≤, —Å—Ä–æ–∫–∏. –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ."
        )
        return


# ---------- Fallback / Routing —Å–æ–æ–±—â–µ–Ω–∏–π ----------
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞: –µ—Å–ª–∏ –ø–∏—à–µ—Ç –∞–¥–º–∏–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞. –ï—Å–ª–∏ –ø–∏—à–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∫–∞—Ä—Ç–æ—á–∫–∞ –∞–¥–º–∏–Ω–∞–º."""
    user = update.effective_user
    chat = update.effective_chat
    text = (update.message.text or "").strip()

    # 1) –ê–¥–º–∏–Ω –ø–∏—à–µ—Ç
    if is_admin(user.id):
        target = PENDING_REPLY.pop(user.id, None)
        if target:
            try:
                await context.bot.send_message(chat_id=target, text=text)
                await update.message.reply_text("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            except Exception as e:
                logger.exception(f"Admin reply failed: {e}")
                await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {e}")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –ù–∞–∂–º–∏ ¬´üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å¬ª –ø–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    # 2) –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –∫–∞—Ä—Ç–æ—á–∫–æ–π
    caption = (
        f"<b>–í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n"
        f"‚Ä¢ –ò–º—è: <code>{user.full_name}</code>\n"
        f"‚Ä¢ Username: {safe_username(user)}\n"
        f"‚Ä¢ User ID: <code>{user.id}</code>\n"
        f"‚Ä¢ Chat ID: <code>{chat.id}</code>\n\n"
        f"–¢–µ–∫—Å—Ç: {text or '(–ø—É—Å—Ç–æ)'}"
    )
    await send_to_admins(context, caption, reply_markup=build_reply_keyboard(chat.id))
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É üíå")


# ---------- Main ----------
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.exception("Exception in handler:", exc_info=context.error)


def main():
    if not BOT_TOKEN:
        raise SystemExit("BOT_TOKEN is not set. Add it to .env or env vars.")

    application: Application = ApplicationBuilder().token(BOT_TOKEN).build()

    # Commands
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("prices", prices))
    application.add_handler(CommandHandler("myid", myid))
    application.add_handler(CommandHandler("post", post))

    # /channel_id –∏–∑ –∫–∞–Ω–∞–ª–∞ (–±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º)
    application.add_handler(
        MessageHandler(filters.ChatType.CHANNEL & filters.Regex(r"^/channel_id$"), channel_id_cmd)
    )

    # Order conversation
    conv = ConversationHandler(
        entry_points=[CommandHandler("order", order_start)],
        states={ORDER_DETAILS: [
            MessageHandler(~filters.COMMAND & (filters.TEXT | filters.PHOTO | filters.Document.ALL), order_details)
        ]},
        fallbacks=[CommandHandler("cancel", order_cancel)],
    )
    application.add_handler(conv)

    # Inline buttons router (–º–µ–Ω—é + –æ—Ç–≤–µ—Ç)
    application.add_handler(CallbackQueryHandler(menu_router))

    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∞–¥–º–∏–Ω/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # Errors
    application.add_error_handler(error_handler)

    logger.info("Starting Kira bot‚Ä¶")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
